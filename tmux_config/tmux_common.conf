# 256 color
set -g default-terminal "screen-256color"

# text selection
# setw -g mode-keys vi
# bind-key -t vi-copy 'v' begin-selection # Begin selection in copy mode.
# bind -t vi-copy 'y' copy-pipe 'xclip -in -selection clipboard'

# smart pane switching with awareness of vim splits
# not used since need to preserve ctrl-l for clear screen
bind -n C-h select-pane -L
bind -n C-j select-pane -D
bind -n C-k select-pane -U
bind -n C-l select-pane -R
bind -n C-\ select-pane -l

# clear screen
bind C-l send-keys 'C-l'

is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n M-Left if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n M-Down if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n M-Up if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n M-Right if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n M-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind C-k clear-history

# options
# set -g default-terminal gnome-terminal
# set-option -g gnome-termminal-keys on

# UTF8
# set -g utf8  # compatibility
# set-window-option -g utf8 on  # compatibility

# colors
# default statusbar colors
set-option -g status-bg black
set-option -g status-fg white
set-option -g status-attr default
# default window title colors
set-window-option -g window-status-fg white
set-window-option -g window-status-bg black
# pane border
# set-option -g pane-border-fg black
# set-option -g pane-active-border-fg black
set -g pane-border-fg colour247
set -g pane-active-border-fg colour247
set -g pane-active-border-bg default

# scrollback limit
set -g history-limit 1000000

# prefix to split window
# set-option default-path "$PWD"  # compatibility
# bind | split-window -h
# bind - split-window -v
# bind | split-window -h -c "#{pane_current_path}"
# bind - split-window -v -c "#{pane_current_path}"

# vim-lie pane movement
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -n M-Left select-pane -L
bind -n M-Down select-pane -D
bind -n M-Up select-pane -U
bind -n M-Right select-pane -R

# window switching with page up/down
# bind-key -n M-PPage select-pane -t :.-
# bind-key -n M-NPage select-pane -t :.+

# resize pane binds
bind Left resize-pane -L
bind Down resize-pane -D
bind Up resize-pane -U
bind Right resize-pane -R
bind C-b resize-pane -t 2 -y 20
bind C-v resize-pane -t 2 -y 2
bind b resize-pane -t 2 -y 2

# mousemode
# if-shell "[[ `tmux -V | cut -d ' ' -f2 | sed 's/[a\.]//g'` -ge 21 ]]" \
#  'source-file ~/.dotfiles/tmux_ge_21.conf' \
#  'source-file ~/.dotfiles/tmux_lt_21.conf'

# pane split to local dir
# if-shell "[[ `tmux -V | cut -d ' ' -f2 | sed 's/[a\.]//g'` -ge 19 ]]" \
#  'source-file ~/.dotfiles/tmux_ge_19.conf' \
#  'source-file ~/.dotfiles/tmux_lt_19.conf'

# OS X `open` problem
# set -g default-command "reattach-to-user-namespace -l /bin/zsh"
# if-shell 'test "$(uname)" = "Darwin"' 'source ~/.dotfiles/tmux-osx.conf'
